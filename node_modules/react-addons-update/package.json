{
  "_args": [
    [
      {
        "raw": "react-addons-update",
        "scope": null,
        "escapedName": "react-addons-update",
        "name": "react-addons-update",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\work\\swkim_work\\workspace\\react_project"
    ]
  ],
  "_from": "react-addons-update@latest",
  "_id": "react-addons-update@15.5.2",
  "_inCache": true,
  "_location": "/react-addons-update",
  "_nodeVersion": "7.7.4",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-addons-update-15.5.2.tgz_1491708250097_0.6047477019019425"
  },
  "_npmUser": {
    "name": "gaearon",
    "email": "dan.abramov@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-addons-update",
    "scope": null,
    "escapedName": "react-addons-update",
    "name": "react-addons-update",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-addons-update/-/react-addons-update-15.5.2.tgz",
  "_shasum": "0ada50494387b17238999ee9662f9f3fc38f935d",
  "_shrinkwrap": null,
  "_spec": "react-addons-update",
  "_where": "E:\\work\\swkim_work\\workspace\\react_project",
  "bugs": {
    "url": "https://github.com/facebook/react/issues"
  },
  "dependencies": {
    "fbjs": "^0.8.9",
    "object-assign": "^4.1.0"
  },
  "description": ">**Note:** >This is a legacy React addon, and is no longer maintained. > >We don't encourage using it in new code, but it exists for backwards compatibility.   >The recommended migration path is to use [`immutability-helper`](https://github.com/kolodny/immutability-helper). Its version `1.0.0` is a drop-in replacement.",
  "devDependencies": {
    "jest": "^19.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "0ada50494387b17238999ee9662f9f3fc38f935d",
    "tarball": "https://registry.npmjs.org/react-addons-update/-/react-addons-update-15.5.2.tgz"
  },
  "files": [
    "LICENSE",
    "PATENTS",
    "README.md",
    "index.js",
    "react-addons-update.js",
    "react-addons-update.min.js"
  ],
  "homepage": "https://github.com/facebook/react#readme",
  "keywords": [
    "react",
    "react-addon"
  ],
  "license": "BSD-3-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    },
    {
      "name": "brianvaughn",
      "email": "briandavidvaughn@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "gaearon",
      "email": "dan.abramov@gmail.com"
    },
    {
      "name": "sebmarkbage",
      "email": "sebastian@calyptus.eu"
    },
    {
      "name": "spicyj",
      "email": "ben@benalpert.com"
    },
    {
      "name": "tomocchino",
      "email": "tomocchino@gmail.com"
    },
    {
      "name": "trueadm",
      "email": "dg@domgan.com"
    },
    {
      "name": "zpao",
      "email": "paul@oshannessy.com"
    }
  ],
  "name": "react-addons-update",
  "optionalDependencies": {},
  "readme": "# react-addons-update\n\n>**Note:**\n>This is a legacy React addon, and is no longer maintained.\n>\n>We don't encourage using it in new code, but it exists for backwards compatibility.  \n>The recommended migration path is to use [`immutability-helper`](https://github.com/kolodny/immutability-helper). Its version `1.0.0` is a drop-in replacement.\n\n**Importing**\n\n```javascript\nimport update from 'react-addons-update'; // ES6\nvar update = require('react-addons-update'); // ES5 with npm\n```\n\nIf you prefer a `<script>` tag, you can get it from `React.addons.update` with:\n\n```html\n<!-- development version -->\n<script src=\"https://unpkg.com/react-addons-update/react-addons-update.js\"></script>\n\n<!-- production version -->\n<script src=\"https://unpkg.com/react-addons-update/react-addons-update.min.js\"></script>\n```\n\nIn this case, make sure to put the `<script>` tag after React.\n\n## Overview\n\nReact lets you use whatever style of data management you want, including mutation. However, if you can use immutable data in performance-critical parts of your application it's easy to implement a fast [`shouldComponentUpdate()`](https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate) method to significantly speed up your app.\n\nDealing with immutable data in JavaScript is more difficult than in languages designed for it, like [Clojure](http://clojure.org/). However, we've provided a simple immutability helper, `update()`, that makes dealing with this type of data much easier, *without* fundamentally changing how your data is represented. You can also take a look at Facebook's [Immutable-js](https://facebook.github.io/immutable-js/docs/) and the [Optimizing Performance](https://facebook.github.io/react/docs/optimizing-performance.html) section for more detail on Immutable-js.\n\n### The Main Idea\n\nIf you mutate data like this:\n\n```js\nmyData.x.y.z = 7;\n// or...\nmyData.a.b.push(9);\n```\n\nYou have no way of determining which data has changed since the previous copy has been overwritten. Instead, you need to create a new copy of `myData` and change only the parts of it that need to be changed. Then you can compare the old copy of `myData` with the new one in `shouldComponentUpdate()` using triple-equals:\n\n```js\nconst newData = deepCopy(myData);\nnewData.x.y.z = 7;\nnewData.a.b.push(9);\n```\n\nUnfortunately, deep copies are expensive, and sometimes impossible. You can alleviate this by only copying objects that need to be changed and by reusing the objects that haven't changed. Unfortunately, in today's JavaScript this can be cumbersome:\n\n```js\nconst newData = extend(myData, {\n  x: extend(myData.x, {\n    y: extend(myData.x.y, {z: 7}),\n  }),\n  a: extend(myData.a, {b: myData.a.b.concat(9)})\n});\n```\n\nWhile this is fairly performant (since it only makes a shallow copy of `log n` objects and reuses the rest), it's a big pain to write. Look at all the repetition! This is not only annoying, but also provides a large surface area for bugs.\n\n## `update()`\n\n`update()` provides simple syntactic sugar around this pattern to make writing this code easier. This code becomes:\n\n```js\nimport update from 'react-addons-update';\n\nconst newData = update(myData, {\n  x: {y: {z: {$set: 7}}},\n  a: {b: {$push: [9]}}\n});\n```\n\nWhile the syntax takes a little getting used to (though it's inspired by [MongoDB's query language](http://docs.mongodb.org/manual/core/crud-introduction/#query)) there's no redundancy, it's statically analyzable and it's not much more typing than the mutative version.\n\nThe `$`-prefixed keys are called *commands*. The data structure they are \"mutating\" is called the *target*.\n\n## Available Commands\n\n  * `{$push: array}` `push()` all the items in `array` on the target.\n  * `{$unshift: array}` `unshift()` all the items in `array` on the target.\n  * `{$splice: array of arrays}` for each item in `arrays` call `splice()` on the target with the parameters provided by the item.\n  * `{$set: any}` replace the target entirely.\n  * `{$merge: object}` merge the keys of `object` with the target.\n  * `{$apply: function}` passes in the current value to the function and updates it with the new returned value.\n\n## Examples\n\n### Simple push\n\n```js\nconst initialArray = [1, 2, 3];\nconst newArray = update(initialArray, {$push: [4]}); // => [1, 2, 3, 4]\n```\n`initialArray` is still `[1, 2, 3]`.\n\n### Nested collections\n\n```js\nconst collection = [1, 2, {a: [12, 17, 15]}];\nconst newCollection = update(collection, {2: {a: {$splice: [[1, 1, 13, 14]]}}});\n// => [1, 2, {a: [12, 13, 14, 15]}]\n```\nThis accesses `collection`'s index `2`, key `a`, and does a splice of one item starting from index `1` (to remove `17`) while inserting `13` and `14`.\n\n### Updating a value based on its current one\n\n```js\nconst obj = {a: 5, b: 3};\nconst newObj = update(obj, {b: {$apply: function(x) {return x * 2;}}});\n// => {a: 5, b: 6}\n// This is equivalent, but gets verbose for deeply nested collections:\nconst newObj2 = update(obj, {b: {$set: obj.b * 2}});\n```\n\n### (Shallow) Merge\n\n```js\nconst obj = {a: 5, b: 3};\nconst newObj = update(obj, {$merge: {b: 6, c: 7}}); // => {a: 5, b: 6, c: 7}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/react.git"
  },
  "scripts": {
    "test": "jest"
  },
  "version": "15.5.2"
}
